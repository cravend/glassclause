datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

/**
 * ===== Enums =====
 */

// User-facing status of a contract.
enum ContractStatus {
    Processing
    Unsafe
    Safe
    Caution
    Escalate
    Failed
}

// Internal job state for the background analysis worker.
enum AnalysisStatus {
    Queued
    Running
    Succeeded
    Failed
}

// Risk level of a flag.
enum RiskLevel {
    Caution
    Escalate
}

// Types of flags.
enum FlagType {
    Indemnity
    NonSolicitation
    GoverningLaw
    LiquidatedDamages
    Other
}

/**
 * ===== Models =====
 */

model Contract {
    id           String   @id @default(cuid())
    rawText      String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @default(now()) @updatedAt
    title        String?
    contractDate String?

    status ContractStatus @default(Processing)

    analysisStatus AnalysisStatus @default(Queued)
    analysisError  String?

    clauses Clause[]
}

model Clause {
    id         String   @id @default(cuid())
    contractId String
    contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

    title    String
    contents String

    flags Flag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Flag {
    id       String @id @default(cuid())
    clauseId String
    clause   Clause @relation(fields: [clauseId], references: [id], onDelete: Cascade)

    risk      RiskLevel
    type      FlagType
    snippet   String
    start     Int
    end       Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
}
